.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Tradition::Witness 3"
.TH Text::Tradition::Witness 3 "2012-09-27" "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Tradition::Witness \- a manuscript witness to a text tradition
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Text::Tradition::Witness;
\&  my $w = Text::Tradition::Witness\->new( 
\&    \*(Aqsigil\*(Aq => \*(AqA\*(Aq,
\&    \*(Aqidentifier\*(Aq => \*(AqOxford MS Ex.1932\*(Aq,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::Tradition::Witness is an object representation of a manuscript
witness to a text tradition.  A manuscript has a sigil (a short code that
represents it in the wider tradition), an identifier (e.g. the library \s-1ID\s0),
and probably a text.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Create a new witness.  Options include:
.IP "\(bu" 4
sigil \- A short code to represent the manuscript.  Required.
.IP "\(bu" 4
sourcetype \- What sort of witness data this is. Options are 
\&'xmldesc', 'plaintext', 'json', or 'collation' (the last should only be 
used by Collation parsers.)
.IP "\(bu" 4
file
=item * string
=item * object
.Sp
The data source for the witness.  Use the appropriate option.
.IP "\(bu" 4
use_text \- An initialization option.  If the witness is read from a
\&\s-1TEI\s0 document and more than one <text/> tag exists therein, the default
behavior is to use the first defined text.  If this is not desired,
use_text should be set to an XPath expression that will select the correct
text.
.IP "\(bu" 4
identifier \- The recognized name of the manuscript, e.g. a library
identifier. Taken from the msDesc element for a \s-1TEI\s0 file.
.IP "\(bu" 4
other_info \- A freeform string for any other description of the
manuscript.
.SS "sigil"
.IX Subsection "sigil"
The sigil by which to identify this manuscript, which must conform to the
specification for \s-1XML\s0 attribute strings (broadly speaking, it must begin
with a letter and can have only a few sorts of punctuation characters in
it.)
.SS "identifier"
.IX Subsection "identifier"
A freeform name by which to identify the manuscript, which may be longer
than the sigil.  Defaults to 'Unidentified ms', but will be taken from the
\&\s-1TEI\s0 msName attribute, or constructed from the settlement and idno if
supplied.
.SS "settlement"
.IX Subsection "settlement"
The city, town, etc. where the manuscript is held. Will be read from the
\&\s-1TEI\s0 msDesc element if supplied.
.SS "repository"
.IX Subsection "repository"
The institution that holds the manuscript. Will be read from the \s-1TEI\s0 msDesc
element if supplied.
.SS "idno"
.IX Subsection "idno"
The identification or call number of the manuscript.  Will be read from the
\&\s-1TEI\s0 msDesc element if supplied.
.SS "text"
.IX Subsection "text"
An array of strings (words) that contains the text of the
manuscript.  This should not change after the witness has been
instantiated, and the path through the collation should always match it.
.SS "layertext"
.IX Subsection "layertext"
An array of strings (words) that contains the layered
text, if any, of the manuscript.  This should not change after the witness
has been instantiated, and the path through the collation should always
match it.
.SS "identifier"
.IX Subsection "identifier"
Accessor method for the witness identifier.
.SS "other_info"
.IX Subsection "other_info"
Accessor method for the general witness description.
.SS "has_source"
.IX Subsection "has_source"
Boolean method that returns a true value if the witness was created with a
data source (that is, a file, string, or object to be parsed).
.SS "is_layered"
.IX Subsection "is_layered"
Boolean method to note whether the witness has layers (e.g. pre-correction 
readings) in the collation.
.SS "export_as_json"
.IX Subsection "export_as_json"
Exports the witness as a \s-1JSON\s0 structure, with the following keys:
.IP "\(bu" 4
id \- The witness sigil
.IP "\(bu" 4
name \- The witness identifier
.IP "\(bu" 4
tokens \- An array of hashes of the form { \*(L"t\*(R":\*(L"\s-1WORD\s0\*(R" }
.SH "BUGS / TODO"
.IX Header "BUGS / TODO"
.IP "\(bu" 4
Figure out how to serialize a witness
.IP "\(bu" 4
Support encodings other than \s-1UTF\-8\s0
.SH "LICENSE"
.IX Header "LICENSE"
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty.  You can redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tara L Andrews <aurum@cpan.org>
