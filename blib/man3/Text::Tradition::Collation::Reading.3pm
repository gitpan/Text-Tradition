.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Tradition::Collation::Reading 3"
.TH Text::Tradition::Collation::Reading 3 "2012-09-27" "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Tradition::Collation::Reading \- represents a reading (usually a word)
in a collation.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::Tradition is a library for representation and analysis of collated
texts, particularly medieval ones.  A 'reading' refers to a unit of text,
usually a word, that appears in one or more witnesses (manuscripts) of the
tradition; the text of a given witness is composed of a set of readings in
a particular sequence
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Creates a new reading in the given collation with the given attributes.
Options include:
.IP "collation \- The Text::Tradition::Collation object to which this reading belongs.  Required." 4
.IX Item "collation - The Text::Tradition::Collation object to which this reading belongs.  Required."
.PD 0
.IP "id \- A unique identifier for this reading. Required." 4
.IX Item "id - A unique identifier for this reading. Required."
.IP "text \- The word or other text of the reading." 4
.IX Item "text - The word or other text of the reading."
.IP "is_start \- The reading is the starting point for the collation." 4
.IX Item "is_start - The reading is the starting point for the collation."
.IP "is_end \- The reading is the ending point for the collation." 4
.IX Item "is_end - The reading is the ending point for the collation."
.IP "is_lacuna \- The 'reading' represents a known gap in the text." 4
.IX Item "is_lacuna - The 'reading' represents a known gap in the text."
.IP "is_ph \- A temporary placeholder for apparatus parsing purposes.  Do not use unless you know what you are doing." 4
.IX Item "is_ph - A temporary placeholder for apparatus parsing purposes.  Do not use unless you know what you are doing."
.IP "rank \- The sequence number of the reading. This should probably not be set manually." 4
.IX Item "rank - The sequence number of the reading. This should probably not be set manually."
.PD
.PP
One of 'text', 'is_start', 'is_end', or 'is_lacuna' is required.
.SS "collation"
.IX Subsection "collation"
.SS "id"
.IX Subsection "id"
.SS "text"
.IX Subsection "text"
.SS "is_start"
.IX Subsection "is_start"
.SS "is_end"
.IX Subsection "is_end"
.SS "is_lacuna"
.IX Subsection "is_lacuna"
.SS "rank"
.IX Subsection "rank"
Accessor methods for the given attributes.
.SS "is_meta"
.IX Subsection "is_meta"
A meta attribute (ha ha), which should be true if any of our 'special'
booleans are true.  Implies that the reading does not represent a bit 
of text found in a witness.
.ie n .SS "is_identical( $other_reading )"
.el .SS "is_identical( \f(CW$other_reading\fP )"
.IX Subsection "is_identical( $other_reading )"
Returns true if the reading is identical to the other reading. The basic test
is equality of \->text attributes, but this may be wrapped or overridden by 
extensions.
.SS "is_combinable"
.IX Subsection "is_combinable"
Returns true if the reading may in theory be combined into a multi-reading
segment within the collation graph. The reading must not be a meta reading,
and it must not have any relationships in its own right with any others.
This test may be wrapped or overridden by extensions.
.SH "Convenience methods"
.IX Header "Convenience methods"
.SS "related_readings"
.IX Subsection "related_readings"
Calls Collation's related_readings with \f(CW$self\fR as the first argument.
.SS "witnesses"
.IX Subsection "witnesses"
Calls Collation's reading_witnesses with \f(CW$self\fR as the first argument.
.SS "predecessors"
.IX Subsection "predecessors"
Returns a list of Reading objects that immediately precede \f(CW$self\fR in the collation.
.SS "successors"
.IX Subsection "successors"
Returns a list of Reading objects that immediately follow \f(CW$self\fR in the collation.
